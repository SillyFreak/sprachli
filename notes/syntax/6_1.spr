/// Approach 1: there are no enums, just structs that happen to implement the same interface.
/// This is very similar to the OO approach (code for different variants is located in different
/// types), but without assuming inheritance or spelling out subtype relationships.

struct Some(value);
struct None;

impl Some {
	fn map(self, f) {
		f(self.0)
	}

	fn unwrap(self) {
		self.0
	}
}

impl None {
	fn map(self, f) {
		None
	}

	fn unwrap(self) {
		panic("None.unwrap()")
	}
}

fn main() {
	let mut opt = Some(1);
	opt = opt.map(fn (value) { value + 1 });
	print(opt);  // Some(2)

	let mut opt = None;
	opt = opt.map(fn (value) { value + 1 });
	print(opt);  // None
}
