use crate::ast;

grammar;

pub SourceFile: ast::SourceFile<'input> = {
	<declarations:Declaration*> => ast::SourceFile { <> },
}

Variable: ast::Variable<'input> = {
	<mutable:"mut"?> <name:Identifier> => {
		let mutable = mutable.is_some();
		ast::Variable { <> }
	},
}

//////
// declarations

pub Declaration: ast::Declaration<'input> = {
	// Use
	<FnDeclaration> => ast::Declaration::Fn(<>),
	<Struct> => ast::Declaration::Struct(<>),
	// Mixin
	// Impl
}

Visibility: ast::Visibility = {
	=> ast::Visibility::Private,
	"pub" => ast::Visibility::Public,
}

pub FnDeclaration: ast::FnDeclaration<'input> = {
	<visibility:Visibility>
	"fn" <name:Identifier>
	"(" <formal_parameters:CommaSeparated<Variable>> ")"
	<body:Block> => ast::FnDeclaration::new(<>),
}

pub Struct: ast::Struct<'input> = {
	<visibility:Visibility>
	"struct" <name:Identifier>
	<members:StructMembers> => ast::Struct::new(<>),
}

StructMembers: ast::StructMembers<'input> = {
	";" => ast::StructMembers::Empty,
	"(" <members:CommaSeparated<Identifier>> ")" ";" => ast::StructMembers::Positional(<>),
	"{" <members:CommaSeparated<Identifier>> "}" => ast::StructMembers::Named(<>),
};

//////
// statements

pub Statement: ast::Statement<'input> = {
	Declaration => ast::Statement::Declaration(<>),
	<Expression> ";" => ast::Statement::Expression(<>),
	<Jump> ";",
	<VariableDeclaration> ";",
	<Assignment> ";",
}

pub Jump: ast::Statement<'input> = {
	"return" <Expression?> => ast::Jump::new_return(<>).into(),
	"break" <Expression?> => ast::Jump::new_break(<>).into(),
	"continue" => ast::Jump::Continue.into(),
}

pub VariableDeclaration: ast::Statement<'input> = {
	"let" <Variable> <("=" <Expression>)?> => ast::VariableDeclaration::new(<>).into(),
}

pub Assignment: ast::Statement<'input> = {
	<left:Expression> "=" <right:Expression> => ast::Assignment::new(<>).into(),
}

//////
// expressions

pub Expression: ast::Expression<'input> = {
	#[precedence(level="1")]
	Number => ast::Expression::Number(<>),
	Bool => ast::Expression::Bool(<>),
	String => ast::Expression::String(<>),
	Identifier => ast::Expression::Identifier(<>),
	Block => ast::Expression::Block(<>),
	Group,
	If,
	Loop,

	#[precedence(level="2")]
	<function:Expression> "(" <actual_parameters:ActualParameters> ")" => ast::Call::new(<>).into(),

	#[precedence(level="3")]
	<operator:UnaryOp> <right:Expression> => ast::Unary::new(<>).into(),
	
	#[precedence(level="4")]
	#[assoc(side="left")]
	<left:Expression> <operator:MultiplicativeOp> <right:Expression> => ast::Binary::new(<>).into(),

	#[precedence(level="5")]
	#[assoc(side="left")]
	<left:Expression> <operator:AdditiveOp> <right:Expression> => ast::Binary::new(<>).into(),

	#[precedence(level="6")]
	#[assoc(side="left")]
	<left:Expression> <operator:ComparisonOp> <right:Expression> => ast::Binary::new(<>).into(),

	#[precedence(level="7")]
	#[assoc(side="left")]
	<left:Expression> <operator:EqualityOp> <right:Expression> => ast::Binary::new(<>).into(),
}

ActualParameters: Vec<ast::Expression<'input>> = {
	CommaSeparated<Expression>
}

EqualityOp: ast::BinaryOperator = {
	"==" => ast::BinaryOperator::Equals,
	"!=" => ast::BinaryOperator::NotEquals,
}

ComparisonOp: ast::BinaryOperator = {
	">" => ast::BinaryOperator::Greater,
	">=" => ast::BinaryOperator::GreaterEquals,
	"<" => ast::BinaryOperator::Less,
	"<=" => ast::BinaryOperator::LessEquals,
}

AdditiveOp: ast::BinaryOperator = {
	"+" => ast::BinaryOperator::Add,
	"-" => ast::BinaryOperator::Subtract,
}

MultiplicativeOp: ast::BinaryOperator = {
	#[precedence(level="1")]
	"*" => ast::BinaryOperator::Multiply,
	"/" => ast::BinaryOperator::Divide,
}

UnaryOp: ast::UnaryOperator = {
	"-" => ast::UnaryOperator::Negate,
	"!" => ast::UnaryOperator::Not,
}

pub Block: ast::Block<'input> = {
	"{" <statements:Statement*> <expression:Expression?> "}" => ast::Block::new(<>),
}

pub Group: ast::Expression<'input> = {
	"(" <Expression> ")",
}

pub If: ast::Expression<'input> = {
	<mut then_branches:(<ThenBranch> "else")*>
	<last_then_branch:ThenBranch>
	<else_branch:("else" <Block>)?>
	=> {
		then_branches.push(last_then_branch);
		ast::If::new(then_branches, else_branch).into()
	},
}

ThenBranch: (ast::Expression<'input>, ast::Block<'input>) = {
	"if" <Expression> <Block>
}

pub Loop: ast::Expression<'input> = {
	"loop" <body:Block> => ast::Loop::new(<>).into()
}

//////
// misc

CommaSeparated<T>: Vec<T> = { // (1)
	<mut v:(<T> ",")*> <e:T?> => { // (2)
		v.extend(e);
		v
	}
}

pub Identifier: &'input str = {
	IDENTIFIER,
}

pub Number: &'input str = {
	NUMBER,
}

pub Bool: bool = {
	"true" => true,
	"false" => false,
}

pub String: &'input str = {
	STRING,
}

match {
	// keywords must have priority over identifiers
	"pub", "fn", "struct",
	"return", "break", "continue",
	"let", "mut",
	"if", "else", "loop",
	"true", "false",
} else {
	r"[_a-zA-Z][_a-zA-Z0-9]*" => IDENTIFIER,
	r"[0-9]+" => NUMBER,
	r#""([^\\"]|\\[\\nrt"])*""# => STRING,

	r"\s*" => { }, // The default whitespace skipping is disabled an `ignore pattern` is specified
	r"//[^\n\r]*[\n\r]*" => { }, // Skip `// comments`
	r"/\*[^*]*\*+(?:[^/*][^*]*\*+)*/" => { },  // Skip `/* comments */`
	_,
}